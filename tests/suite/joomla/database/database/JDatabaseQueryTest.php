<?php
/**
 * @version		$Id: JDatabaseQueryTest.php 20196 2011-01-09 02:40:25Z ian $
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

require_once dirname(__FILE__).'/JDatabaseQueryInspector.php';

require_once JPATH_PLATFORM.'/joomla/database/database/mysqliquery.php';

/**
 * Test class for JDatabaseQuery.
 * Generated by PHPUnit on 2009-10-08 at 22:01:11.
 */
class JDatabaseQueryTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var  JDatbabase  A mock of the JDatabase object for testing purposes.
	 */
	protected $dbo;

	/**
	 * Callback for the dbo quote method.
	 *
	 * @param  string  $value  The value to be quoted.
	 *
	 * @return string  The value passed wrapped in MySQL quotes.
	 *
	 * @since  11.1
	 */
	public function callbackQuote($value)
	{
		return "'$value'";
	}

	/**
	 * Callback for the dbo quoteName method.
	 *
	 * @param  string  $value  The value to be quoted.
	 *
	 * @return string  The value passed wrapped in MySQL quotes.
	 *
	 * @since  11.1
	 */
	public function callbackQuoteName($value)
	{
		return "`$value`";
	}

	/**
	 * Data for the testNullDate test.
	 *
	 * @return  array
	 *
	 * @since   11.1
	 */
	public function dataTestNullDate()
	{
		return array(
			// quoted, expected
			array(true, "'0000-00-00 00:00:00'"),
			array(false, "0000-00-00 00:00:00"),
		);
	}

	/**
	 * Data for the testNullDate test.
	 *
	 * @return  array
	 *
	 * @since   11.1
	 */
	public function dataTestQuote()
	{
		return array(
			// text, escaped, expected
			array('text', false, "'text'"),
		);
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp()
	{
		$this->dbo = $this->getMock(
			'JDatabase',
			array(
				'connected',
				'escape',
				'explain',
				'fetchArray',
				'fetchAssoc',
				'fetchObject',
				'freeResult',
				'getAffectedRows',
				'getCollation',
				'getNullDate',
				'getNumRows',
				'getQuery',
				'getTableColumns',
				'getTableCreate',
				'getTableKeys',
				'getTableList',
				'getVersion',
				'hasUTF',
				'insertId',
				'quote',
				'quoteName',
				'query',
				'queryBatch',
				'select',
				'setUTF',
				'transactionCommit',
				'transactionRollback',
				'transactionStart',
				'test',
			),
			array(),
			'',
			false
		);

		// Add special handling for the getNullDate method.
		$this->dbo->expects(
			$this->any()
		)
		->method('getNullDate')
		->will(
			$this->returnValue(
				'0000-00-00 00:00:00'
			)
		);

		// Add special handling for the quote method.
		$this->dbo->expects(
			$this->any()
		)
		->method('quote')
		->will(
			$this->returnCallback(
				array($this, 'callbackQuote')
			)
		);

		// Add special handling for the quoteName method.
		$this->dbo->expects(
			$this->any()
		)
		->method('quoteName')
		->will(
			$this->returnCallback(
				array($this, 'callbackQuoteName')
			)
		);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	/**
	 * @todo Implement test__toString().
	 */
	public function test__toString()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testFrom().
	 */
	public function testFrom()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGroup().
	 */
	public function testGroup()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testHaving().
	 */
	public function testHaving()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testInnerJoin().
	 */
	public function testInnerJoin()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testJoin().
	 */
	public function testJoin()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testLeftJoin().
	 */
	public function testLeftJoin()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Tests the quoteName method.
	 *
	 * @param   bool    $quoted    The value of the quoted argument.
	 * @param   string  $expected  The expected result.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 * @dataProvider  dataTestNullDate
	 */
	public function testNullDate($quoted, $expected)
	{
		$q = new JDatabaseQueryInspector($this->dbo);

		$this->assertThat(
			$q->nullDate($quoted),
			$this->equalTo($expected),
			'The nullDate method should be a proxy for the JDatabase::getNullDate method.'
		);
	}
	/**
	 * @todo Implement testOrder().
	 */
	public function testOrder()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testOuterJoin().
	 */
	public function testOuterJoin()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Tests the quoteName method.
	 *
	 * @param   bool    $text      The value to be quoted.
	 * @param   bool    $escape    True to escape the string, false to leave it unchanged.
	 * @param   string  $expected  The expected result.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 * @dataProvider  dataTestQuote
	 */
	public function testQuote($text, $escape, $expected)
	{
		$q = new JDatabaseQueryInspector($this->dbo);

		$this->assertThat(
			$q->quoteName("test"),
			$this->equalTo("`test`"),
			'The quoteName method should be a proxy for the JDatabase::escape method.'
		);
	}

	/**
	 * Tests the quoteName method.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testQuoteName()
	{
		$q = new JDatabaseQueryInspector($this->dbo);

		$this->assertThat(
			$q->quoteName("test"),
			$this->equalTo("`test`"),
			'The quoteName method should be a proxy for the JDatabase::escape method.'
		);
	}

	/**
	 * @todo Implement testRightJoin().
	 */
	public function testRightJoin()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testSelect().
	 */
	public function testSelect()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testWhere().
	 */
	public function testWhere()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}
}