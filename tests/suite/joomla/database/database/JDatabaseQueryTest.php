<?php
/**
 * @version		$Id: JDatabaseQueryTest.php 20196 2011-01-09 02:40:25Z ian $
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

require_once dirname(__FILE__).'/JDatabaseQueryInspector.php';

require_once JPATH_PLATFORM.'/joomla/database/database/mysqliquery.php';

/**
 * Test class for JDatabaseQuery.
 * Generated by PHPUnit on 2009-10-08 at 22:01:11.
 */
class JDatabaseQueryTest extends PHPUnit_Framework_TestCase {
	/**
	 * @var	JDatabaseQuery
	 * @access protected
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *
	 * @access protected
	 */
	protected function setUp()
	{
		$this->object = new JDatabaseQueryMySQLi;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 *
	 * @access protected
	 */
	protected function tearDown() {
	}

	/**
	 * @todo Implement testSelect().
	 */
	public function testSelect() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testFrom().
	 */
	public function testFrom() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testJoin().
	 */
	public function testJoin() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testInnerJoin().
	 */
	public function testInnerJoin() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testOuterJoin().
	 */
	public function testOuterJoin() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testLeftJoin().
	 */
	public function testLeftJoin() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testRightJoin().
	 */
	public function testRightJoin() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testWhere().
	 */
	public function testWhere() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testGroup().
	 */
	public function testGroup() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testHaving().
	 */
	public function testHaving() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement testOrder().
	 */
	public function testOrder() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * @todo Implement test__toString().
	 */
	public function test__toString() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete('This test has not been implemented yet.');
	}

	/**
	 * Tests the quoteName method.
	 *
	 * @return  void
	 *
	 * @since   11.1
	 */
	public function testQuoteName()
	{
		$dbo = $this->getMock(
			'JDatabase',
			array(
				'connected',
				'escape',
				'explain',
				'fetchArray',
				'fetchAssoc',
				'fetchObject',
				'freeResult',
				'getAffectedRows',
				'getCollation',
				'getNumRows',
				'getQuery',
				'getTableColumns',
				'getTableCreate',
				'getTableKeys',
				'getTableList',
				'getVersion',
				'hasUTF',
				'insertId',
				'quoteName',
				'query',
				'queryBatch',
				'select',
				'setUTF',
				'transactionCommit',
				'transactionRollback',
				'transactionStart',
				'test',
			),
			array(),
			'',
			false
		);

		$dbo->expects(
			$this->any()
		)
		->method('quoteName')
		->with($this->anything())
		->will(
			$this->returnValue(
				'success'
			)
		);

		$q = new JDatabaseQueryInspector($dbo);

		$this->assertThat(
			$q->quoteName('anything'),
			$this->equalTo('success'),
			'The quoteName method should be a proxy for the JDatabase::escape method.'
		);
	}
}